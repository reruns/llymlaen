// Generated by psc-bundle 0.10.5
var PS = {};
(function(exports) {
    "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";              

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var hexadecimal = 16;
  exports["hexadecimal"] = hexadecimal;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($169) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($169));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 3 - line 35, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 42, column 3 - line 42, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = Partial_Unsafe.unsafePartial(function (dictPartial) {
              return function (v) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar15) {
                          return $dollar15;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (v instanceof Done) {
                          return v.value0;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 28 - line 130, column 42: " + [ v.constructor.name ]);
                  })());
              };
          });
          var f$prime = function ($47) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($47));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Loop) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 119, column 5 - line 124, column 26: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();                    
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($100) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($100));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 55, column 3 - line 55, column 69: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var bimapFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (nf) {
              return function (nm) {
                  return function (v) {
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound(function ($101) {
                                  return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value0($101));
                              })(function ($102) {
                                  return bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm)(v1.value1($102));
                              });
                          })(v.value0);
                      };
                      if (v instanceof FreeT) {
                          return new FreeT(function (v1) {
                              return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)(function ($103) {
                                  return nf(Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm))($103));
                              }))(nm(v.value0(Data_Unit.unit)));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 101, column 1 - line 101, column 114: " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var hoistFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var $82 = v1.value0(Data_Unit.unit);
                      if ($82 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($82.value0(Data_Unit.unit))(function (v2) {
                              if (v2 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(v1.value1(v2.value0)));
                              };
                              if (v2 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(h)(v1.value1);
                                  })(v2.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 49, column 20 - line 51, column 67: " + [ v2.constructor.name ]);
                          });
                      };
                      if ($82 instanceof Bind) {
                          return Data_Exists.runExists(function (v2) {
                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec["__superclass_Control.Monad.Monad_0"]()))(v2.value1(z))(v1.value1);
                              })));
                          })($82.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 47, column 5 - line 52, column 98: " + [ $82.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 45, column 3 - line 45, column 35: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 109, column 3 - line 109, column 30: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  exports["bimapFreeT"] = bimapFreeT;
  exports["hoistFreeT"] = hoistFreeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.setShadowColor = function(color) {
      return function(ctx) {
          return function() {
              ctx.shadowColor = color;
              return ctx;
          };
      };
  };

  exports.setShadowBlur = function(blur) {
      return function(ctx) {
          return function() {
              ctx.shadowBlur = blur;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetX = function(offsetX) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetX = offsetX;
              return ctx;
          };
      };
  };

  exports.setShadowOffsetY = function(offsetY) {
      return function(ctx) {
          return function() {
              ctx.shadowOffsetY = offsetY;
              return ctx;
          };
      };
  };

  exports.setLineCapImpl = function(cap) {
      return function(ctx) {
          return function() {
              ctx.lineCap = cap;
              return ctx;
          };
      };
  };

  exports.setGlobalCompositeOperationImpl = function(ctx) {
      return function(op) {
          return function() {
              ctx.globalCompositeOperation = op;
              return ctx;
          };
      };
  };

  exports.setGlobalAlpha = function(ctx) {
      return function(alpha) {
          return function() {
              ctx.globalAlpha = alpha;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.strokeRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.strokeRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.rotate = function(angle) {
      return function(ctx) {
          return function() {
              ctx.rotate(angle);
              return ctx;
          };
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.transform = function(t) {
      return function(ctx) {
          return function() {
              ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.textAlignImpl = function(ctx) {
      return function() {
          return ctx.textAlign;
      }
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };

  exports.getImageData = function(ctx) {
      return function(x) {
          return function(y) {
              return function(w) {
                  return function(h) {
                      return function() {
                          return ctx.getImageData(x, y, w, h);
                      };
                  };
              };
          };
      };
  };

  exports.putImageDataFull = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function(dx) {
                      return function(dy) {
                          return function(dw) {
                              return function(dh) {
                                  return function() {
                                      ctx.putImageData(image_data, x, y, dx, dy, dw, dh);
                                      return ctx;
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };

  exports.putImageData = function(ctx) {
      return function(image_data) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.putImageData(image_data, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.createImageData = function(ctx) {
      return function(sw) {
          return function(sh) {
              return function() {
                  return ctx.createImageData(sw, sh);
              };
          };
      };
  };

  exports.createImageDataCopy = function(ctx) {
      return function(image_data) {
          return function() {
              return ctx.createImageData(image_data);
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];        
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var SourceOver = (function () {
      function SourceOver() {

      };
      SourceOver.value = new SourceOver();
      return SourceOver;
  })();
  var SourceIn = (function () {
      function SourceIn() {

      };
      SourceIn.value = new SourceIn();
      return SourceIn;
  })();
  var SourceOut = (function () {
      function SourceOut() {

      };
      SourceOut.value = new SourceOut();
      return SourceOut;
  })();
  var SourceAtop = (function () {
      function SourceAtop() {

      };
      SourceAtop.value = new SourceAtop();
      return SourceAtop;
  })();
  var DestinationOver = (function () {
      function DestinationOver() {

      };
      DestinationOver.value = new DestinationOver();
      return DestinationOver;
  })();
  var DestinationIn = (function () {
      function DestinationIn() {

      };
      DestinationIn.value = new DestinationIn();
      return DestinationIn;
  })();
  var DestinationOut = (function () {
      function DestinationOut() {

      };
      DestinationOut.value = new DestinationOut();
      return DestinationOut;
  })();
  var DestinationAtop = (function () {
      function DestinationAtop() {

      };
      DestinationAtop.value = new DestinationAtop();
      return DestinationAtop;
  })();
  var Lighter = (function () {
      function Lighter() {

      };
      Lighter.value = new Lighter();
      return Lighter;
  })();
  var Copy = (function () {
      function Copy() {

      };
      Copy.value = new Copy();
      return Copy;
  })();
  var Xor = (function () {
      function Xor() {

      };
      Xor.value = new Xor();
      return Xor;
  })();
  var Multiply = (function () {
      function Multiply() {

      };
      Multiply.value = new Multiply();
      return Multiply;
  })();
  var Screen = (function () {
      function Screen() {

      };
      Screen.value = new Screen();
      return Screen;
  })();
  var Overlay = (function () {
      function Overlay() {

      };
      Overlay.value = new Overlay();
      return Overlay;
  })();
  var Darken = (function () {
      function Darken() {

      };
      Darken.value = new Darken();
      return Darken;
  })();
  var Lighten = (function () {
      function Lighten() {

      };
      Lighten.value = new Lighten();
      return Lighten;
  })();
  var ColorDodge = (function () {
      function ColorDodge() {

      };
      ColorDodge.value = new ColorDodge();
      return ColorDodge;
  })();
  var ColorBurn = (function () {
      function ColorBurn() {

      };
      ColorBurn.value = new ColorBurn();
      return ColorBurn;
  })();
  var HardLight = (function () {
      function HardLight() {

      };
      HardLight.value = new HardLight();
      return HardLight;
  })();
  var SoftLight = (function () {
      function SoftLight() {

      };
      SoftLight.value = new SoftLight();
      return SoftLight;
  })();
  var Difference = (function () {
      function Difference() {

      };
      Difference.value = new Difference();
      return Difference;
  })();
  var Exclusion = (function () {
      function Exclusion() {

      };
      Exclusion.value = new Exclusion();
      return Exclusion;
  })();
  var Hue = (function () {
      function Hue() {

      };
      Hue.value = new Hue();
      return Hue;
  })();
  var Saturation = (function () {
      function Saturation() {

      };
      Saturation.value = new Saturation();
      return Saturation;
  })();
  var Color = (function () {
      function Color() {

      };
      Color.value = new Color();
      return Color;
  })();
  var Luminosity = (function () {
      function Luminosity() {

      };
      Luminosity.value = new Luminosity();
      return Luminosity;
  })();
  var textAlign = function (ctx) {
      var unsafeParseTextAlign = function (v) {
          if (v === "left") {
              return AlignLeft.value;
          };
          if (v === "right") {
              return AlignRight.value;
          };
          if (v === "center") {
              return AlignCenter.value;
          };
          if (v === "start") {
              return AlignStart.value;
          };
          if (v === "end") {
              return AlignEnd.value;
          };
          return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("invalid TextAlign: " + v);
      };
      return Data_Functor.map(Control_Monad_Eff.functorEff)(unsafeParseTextAlign)($foreign.textAlignImpl(ctx));
  }; 
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 513, column 5 - line 514, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setLineCap = function (v) {
      if (v instanceof Round) {
          return $foreign.setLineCapImpl("round");
      };
      if (v instanceof Square) {
          return $foreign.setLineCapImpl("square");
      };
      if (v instanceof Butt) {
          return $foreign.setLineCapImpl("butt");
      };
      throw new Error("Failed pattern match at Graphics.Canvas line 233, column 1 - line 234, column 1: " + [ v.constructor.name ]);
  };
  var setGlobalCompositeOperation = function (ctx) {
      return function (composite) {
          var toString = function (v) {
              if (v instanceof SourceOver) {
                  return "source-over";
              };
              if (v instanceof SourceIn) {
                  return "source-in";
              };
              if (v instanceof SourceOut) {
                  return "source-out";
              };
              if (v instanceof SourceAtop) {
                  return "source-atop";
              };
              if (v instanceof DestinationOver) {
                  return "destination-over";
              };
              if (v instanceof DestinationIn) {
                  return "destination-in";
              };
              if (v instanceof DestinationOut) {
                  return "destination-out";
              };
              if (v instanceof DestinationAtop) {
                  return "destination-atop";
              };
              if (v instanceof Lighter) {
                  return "lighter";
              };
              if (v instanceof Copy) {
                  return "copy";
              };
              if (v instanceof Xor) {
                  return "xor";
              };
              if (v instanceof Multiply) {
                  return "multiply";
              };
              if (v instanceof Screen) {
                  return "screen";
              };
              if (v instanceof Overlay) {
                  return "overlay";
              };
              if (v instanceof Darken) {
                  return "darken";
              };
              if (v instanceof Lighten) {
                  return "lighten";
              };
              if (v instanceof ColorDodge) {
                  return "color-dodge";
              };
              if (v instanceof ColorBurn) {
                  return "color-burn";
              };
              if (v instanceof HardLight) {
                  return "hard-light";
              };
              if (v instanceof SoftLight) {
                  return "soft-light";
              };
              if (v instanceof Difference) {
                  return "difference";
              };
              if (v instanceof Exclusion) {
                  return "exclusion";
              };
              if (v instanceof Hue) {
                  return "hue";
              };
              if (v instanceof Saturation) {
                  return "saturation";
              };
              if (v instanceof Color) {
                  return "color";
              };
              if (v instanceof Luminosity) {
                  return "luminosity";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 316, column 5 - line 317, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setGlobalCompositeOperationImpl(ctx)(toString(composite));
      };
  };
  var setCanvasDimensions = function (d) {
      return function (ce) {
          return Control_Bind.bind(Control_Monad_Eff.bindEff)($foreign.setCanvasHeight(d.height)(ce))($foreign.setCanvasWidth(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["SourceOver"] = SourceOver;
  exports["SourceIn"] = SourceIn;
  exports["SourceOut"] = SourceOut;
  exports["SourceAtop"] = SourceAtop;
  exports["DestinationOver"] = DestinationOver;
  exports["DestinationIn"] = DestinationIn;
  exports["DestinationOut"] = DestinationOut;
  exports["DestinationAtop"] = DestinationAtop;
  exports["Lighter"] = Lighter;
  exports["Copy"] = Copy;
  exports["Xor"] = Xor;
  exports["Multiply"] = Multiply;
  exports["Screen"] = Screen;
  exports["Overlay"] = Overlay;
  exports["Darken"] = Darken;
  exports["Lighten"] = Lighten;
  exports["ColorDodge"] = ColorDodge;
  exports["ColorBurn"] = ColorBurn;
  exports["HardLight"] = HardLight;
  exports["SoftLight"] = SoftLight;
  exports["Difference"] = Difference;
  exports["Exclusion"] = Exclusion;
  exports["Hue"] = Hue;
  exports["Saturation"] = Saturation;
  exports["Color"] = Color;
  exports["Luminosity"] = Luminosity;
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["setGlobalCompositeOperation"] = setGlobalCompositeOperation;
  exports["setLineCap"] = setLineCap;
  exports["setTextAlign"] = setTextAlign;
  exports["textAlign"] = textAlign;
  exports["arc"] = $foreign.arc;
  exports["beginPath"] = $foreign.beginPath;
  exports["clearRect"] = $foreign.clearRect;
  exports["clip"] = $foreign.clip;
  exports["closePath"] = $foreign.closePath;
  exports["createImageData"] = $foreign.createImageData;
  exports["createImageDataCopy"] = $foreign.createImageDataCopy;
  exports["drawImage"] = $foreign.drawImage;
  exports["fill"] = $foreign.fill;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["font"] = $foreign.font;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getImageData"] = $foreign.getImageData;
  exports["lineTo"] = $foreign.lineTo;
  exports["measureText"] = $foreign.measureText;
  exports["moveTo"] = $foreign.moveTo;
  exports["putImageData"] = $foreign.putImageData;
  exports["putImageDataFull"] = $foreign.putImageDataFull;
  exports["rect"] = $foreign.rect;
  exports["restore"] = $foreign.restore;
  exports["rotate"] = $foreign.rotate;
  exports["save"] = $foreign.save;
  exports["scale"] = $foreign.scale;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
  exports["setGlobalAlpha"] = $foreign.setGlobalAlpha;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["stroke"] = $foreign.stroke;
  exports["strokeRect"] = $foreign.strokeRect;
  exports["strokeText"] = $foreign.strokeText;
  exports["transform"] = $foreign.transform;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Applicative = PS["Control.Applicative"];        
  var SetLineWidth = (function () {
      function SetLineWidth(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineWidth.create = function (value0) {
          return function (value1) {
              return new SetLineWidth(value0, value1);
          };
      };
      return SetLineWidth;
  })();
  var SetFillStyle = (function () {
      function SetFillStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFillStyle.create = function (value0) {
          return function (value1) {
              return new SetFillStyle(value0, value1);
          };
      };
      return SetFillStyle;
  })();
  var SetStrokeStyle = (function () {
      function SetStrokeStyle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetStrokeStyle.create = function (value0) {
          return function (value1) {
              return new SetStrokeStyle(value0, value1);
          };
      };
      return SetStrokeStyle;
  })();
  var SetShadowColor = (function () {
      function SetShadowColor(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowColor.create = function (value0) {
          return function (value1) {
              return new SetShadowColor(value0, value1);
          };
      };
      return SetShadowColor;
  })();
  var SetShadowBlur = (function () {
      function SetShadowBlur(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowBlur.create = function (value0) {
          return function (value1) {
              return new SetShadowBlur(value0, value1);
          };
      };
      return SetShadowBlur;
  })();
  var SetShadowOffsetX = (function () {
      function SetShadowOffsetX(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetX.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetX(value0, value1);
          };
      };
      return SetShadowOffsetX;
  })();
  var SetShadowOffsetY = (function () {
      function SetShadowOffsetY(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetShadowOffsetY.create = function (value0) {
          return function (value1) {
              return new SetShadowOffsetY(value0, value1);
          };
      };
      return SetShadowOffsetY;
  })();
  var SetLineCap = (function () {
      function SetLineCap(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetLineCap.create = function (value0) {
          return function (value1) {
              return new SetLineCap(value0, value1);
          };
      };
      return SetLineCap;
  })();
  var SetComposite = (function () {
      function SetComposite(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetComposite.create = function (value0) {
          return function (value1) {
              return new SetComposite(value0, value1);
          };
      };
      return SetComposite;
  })();
  var SetAlpha = (function () {
      function SetAlpha(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetAlpha.create = function (value0) {
          return function (value1) {
              return new SetAlpha(value0, value1);
          };
      };
      return SetAlpha;
  })();
  var BeginPath = (function () {
      function BeginPath(value0) {
          this.value0 = value0;
      };
      BeginPath.create = function (value0) {
          return new BeginPath(value0);
      };
      return BeginPath;
  })();
  var Stroke = (function () {
      function Stroke(value0) {
          this.value0 = value0;
      };
      Stroke.create = function (value0) {
          return new Stroke(value0);
      };
      return Stroke;
  })();
  var Fill = (function () {
      function Fill(value0) {
          this.value0 = value0;
      };
      Fill.create = function (value0) {
          return new Fill(value0);
      };
      return Fill;
  })();
  var Clip = (function () {
      function Clip(value0) {
          this.value0 = value0;
      };
      Clip.create = function (value0) {
          return new Clip(value0);
      };
      return Clip;
  })();
  var LineTo = (function () {
      function LineTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      LineTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new LineTo(value0, value1, value2);
              };
          };
      };
      return LineTo;
  })();
  var MoveTo = (function () {
      function MoveTo(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      MoveTo.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new MoveTo(value0, value1, value2);
              };
          };
      };
      return MoveTo;
  })();
  var ClosePath = (function () {
      function ClosePath(value0) {
          this.value0 = value0;
      };
      ClosePath.create = function (value0) {
          return new ClosePath(value0);
      };
      return ClosePath;
  })();
  var Arc = (function () {
      function Arc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Arc.create = function (value0) {
          return function (value1) {
              return new Arc(value0, value1);
          };
      };
      return Arc;
  })();
  var Rect = (function () {
      function Rect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rect.create = function (value0) {
          return function (value1) {
              return new Rect(value0, value1);
          };
      };
      return Rect;
  })();
  var FillRect = (function () {
      function FillRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FillRect.create = function (value0) {
          return function (value1) {
              return new FillRect(value0, value1);
          };
      };
      return FillRect;
  })();
  var StrokeRect = (function () {
      function StrokeRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      StrokeRect.create = function (value0) {
          return function (value1) {
              return new StrokeRect(value0, value1);
          };
      };
      return StrokeRect;
  })();
  var ClearRect = (function () {
      function ClearRect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ClearRect.create = function (value0) {
          return function (value1) {
              return new ClearRect(value0, value1);
          };
      };
      return ClearRect;
  })();
  var Scale = (function () {
      function Scale(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Scale(value0, value1, value2);
              };
          };
      };
      return Scale;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Translate = (function () {
      function Translate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Translate(value0, value1, value2);
              };
          };
      };
      return Translate;
  })();
  var Transform = (function () {
      function Transform(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Transform.create = function (value0) {
          return function (value1) {
              return new Transform(value0, value1);
          };
      };
      return Transform;
  })();
  var TextAlign = (function () {
      function TextAlign(value0) {
          this.value0 = value0;
      };
      TextAlign.create = function (value0) {
          return new TextAlign(value0);
      };
      return TextAlign;
  })();
  var SetTextAlign = (function () {
      function SetTextAlign(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetTextAlign.create = function (value0) {
          return function (value1) {
              return new SetTextAlign(value0, value1);
          };
      };
      return SetTextAlign;
  })();
  var Font = (function () {
      function Font(value0) {
          this.value0 = value0;
      };
      Font.create = function (value0) {
          return new Font(value0);
      };
      return Font;
  })();
  var SetFont = (function () {
      function SetFont(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetFont.create = function (value0) {
          return function (value1) {
              return new SetFont(value0, value1);
          };
      };
      return SetFont;
  })();
  var FillText = (function () {
      function FillText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      FillText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new FillText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return FillText;
  })();
  var StrokeText = (function () {
      function StrokeText(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      StrokeText.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new StrokeText(value0, value1, value2, value3);
                  };
              };
          };
      };
      return StrokeText;
  })();
  var MeasureText = (function () {
      function MeasureText(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      MeasureText.create = function (value0) {
          return function (value1) {
              return new MeasureText(value0, value1);
          };
      };
      return MeasureText;
  })();
  var Save = (function () {
      function Save(value0) {
          this.value0 = value0;
      };
      Save.create = function (value0) {
          return new Save(value0);
      };
      return Save;
  })();
  var Restore = (function () {
      function Restore(value0) {
          this.value0 = value0;
      };
      Restore.create = function (value0) {
          return new Restore(value0);
      };
      return Restore;
  })();
  var GetImageData = (function () {
      function GetImageData(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      GetImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new GetImageData(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return GetImageData;
  })();
  var PutImageData = (function () {
      function PutImageData(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      PutImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new PutImageData(value0, value1, value2, value3);
                  };
              };
          };
      };
      return PutImageData;
  })();
  var PutImageDataFull = (function () {
      function PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
          this.value7 = value7;
      };
      PutImageDataFull.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return function (value7) {
                                      return new PutImageDataFull(value0, value1, value2, value3, value4, value5, value6, value7);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
      return PutImageDataFull;
  })();
  var CreateImageData = (function () {
      function CreateImageData(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      CreateImageData.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new CreateImageData(value0, value1, value2);
              };
          };
      };
      return CreateImageData;
  })();
  var CreateImageDataCopy = (function () {
      function CreateImageDataCopy(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CreateImageDataCopy.create = function (value0) {
          return function (value1) {
              return new CreateImageDataCopy(value0, value1);
          };
      };
      return CreateImageDataCopy;
  })();
  var DrawImage = (function () {
      function DrawImage(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      DrawImage.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new DrawImage(value0, value1, value2, value3);
                  };
              };
          };
      };
      return DrawImage;
  })();
  var interpretGraphics = function (ctx) {
      var go = function (v) {
          if (v instanceof SetLineWidth) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setLineWidth(v.value0)(ctx));
          };
          if (v instanceof SetFillStyle) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setFillStyle(v.value0)(ctx));
          };
          if (v instanceof SetStrokeStyle) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setStrokeStyle(v.value0)(ctx));
          };
          if (v instanceof SetShadowColor) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowColor(v.value0)(ctx));
          };
          if (v instanceof SetShadowBlur) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowBlur(v.value0)(ctx));
          };
          if (v instanceof SetShadowOffsetX) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowOffsetX(v.value0)(ctx));
          };
          if (v instanceof SetShadowOffsetY) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setShadowOffsetY(v.value0)(ctx));
          };
          if (v instanceof SetLineCap) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setLineCap(v.value0)(ctx));
          };
          if (v instanceof SetComposite) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setGlobalCompositeOperation(ctx)(v.value0));
          };
          if (v instanceof SetAlpha) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setGlobalAlpha(ctx)(v.value0));
          };
          if (v instanceof BeginPath) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.beginPath(ctx));
          };
          if (v instanceof Stroke) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.stroke(ctx));
          };
          if (v instanceof Fill) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.fill(ctx));
          };
          if (v instanceof Clip) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.clip(ctx));
          };
          if (v instanceof LineTo) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.lineTo(ctx)(v.value0)(v.value1));
          };
          if (v instanceof MoveTo) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.moveTo(ctx)(v.value0)(v.value1));
          };
          if (v instanceof ClosePath) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.closePath(ctx));
          };
          if (v instanceof Arc) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.arc(ctx)(v.value0));
          };
          if (v instanceof Rect) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof FillRect) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.fillRect(ctx)(v.value0));
          };
          if (v instanceof StrokeRect) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.strokeRect(ctx)(v.value0));
          };
          if (v instanceof ClearRect) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.clearRect(ctx)(v.value0));
          };
          if (v instanceof Scale) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.scale({
                  scaleX: v.value0, 
                  scaleY: v.value1
              })(ctx));
          };
          if (v instanceof Rotate) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.rotate(v.value0)(ctx));
          };
          if (v instanceof Translate) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value2))(Graphics_Canvas.translate({
                  translateX: v.value0, 
                  translateY: v.value1
              })(ctx));
          };
          if (v instanceof Transform) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.transform(v.value0)(ctx));
          };
          if (v instanceof TextAlign) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.textAlign(ctx));
          };
          if (v instanceof SetTextAlign) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setTextAlign(ctx)(v.value0));
          };
          if (v instanceof Font) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value0)(Graphics_Canvas.font(ctx));
          };
          if (v instanceof SetFont) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value1))(Graphics_Canvas.setFont(v.value0)(ctx));
          };
          if (v instanceof FillText) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.fillText(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof StrokeText) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.strokeText(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof MeasureText) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.measureText(ctx)(v.value0));
          };
          if (v instanceof Save) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.save(ctx));
          };
          if (v instanceof Restore) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value0))(Graphics_Canvas.restore(ctx));
          };
          if (v instanceof GetImageData) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value4)(Graphics_Canvas.getImageData(ctx)(v.value0)(v.value1)(v.value2)(v.value3));
          };
          if (v instanceof PutImageData) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.putImageData(ctx)(v.value0)(v.value1)(v.value2));
          };
          if (v instanceof PutImageDataFull) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value7))(Graphics_Canvas.putImageDataFull(ctx)(v.value0)(v.value1)(v.value2)(v.value3)(v.value4)(v.value5)(v.value6));
          };
          if (v instanceof CreateImageData) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value2)(Graphics_Canvas.createImageData(ctx)(v.value0)(v.value1));
          };
          if (v instanceof CreateImageDataCopy) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(v.value1)(Graphics_Canvas.createImageDataCopy(ctx)(v.value0));
          };
          if (v instanceof DrawImage) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](v.value3))(Graphics_Canvas.drawImage(ctx)(v.value0)(v.value1)(v.value2));
          };
          throw new Error("Failed pattern match at Graphics.Canvas.Free line 249, column 3 - line 250, column 42: " + [ v.constructor.name ]);
      };
      return go;
  };
  var functorGraphicsF = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof SetLineWidth) {
              return new SetLineWidth(m.value0, f(m.value1));
          };
          if (m instanceof SetFillStyle) {
              return new SetFillStyle(m.value0, f(m.value1));
          };
          if (m instanceof SetStrokeStyle) {
              return new SetStrokeStyle(m.value0, f(m.value1));
          };
          if (m instanceof SetShadowColor) {
              return new SetShadowColor(m.value0, f(m.value1));
          };
          if (m instanceof SetShadowBlur) {
              return new SetShadowBlur(m.value0, f(m.value1));
          };
          if (m instanceof SetShadowOffsetX) {
              return new SetShadowOffsetX(m.value0, f(m.value1));
          };
          if (m instanceof SetShadowOffsetY) {
              return new SetShadowOffsetY(m.value0, f(m.value1));
          };
          if (m instanceof SetLineCap) {
              return new SetLineCap(m.value0, f(m.value1));
          };
          if (m instanceof SetComposite) {
              return new SetComposite(m.value0, f(m.value1));
          };
          if (m instanceof SetAlpha) {
              return new SetAlpha(m.value0, f(m.value1));
          };
          if (m instanceof BeginPath) {
              return new BeginPath(f(m.value0));
          };
          if (m instanceof Stroke) {
              return new Stroke(f(m.value0));
          };
          if (m instanceof Fill) {
              return new Fill(f(m.value0));
          };
          if (m instanceof Clip) {
              return new Clip(f(m.value0));
          };
          if (m instanceof LineTo) {
              return new LineTo(m.value0, m.value1, f(m.value2));
          };
          if (m instanceof MoveTo) {
              return new MoveTo(m.value0, m.value1, f(m.value2));
          };
          if (m instanceof ClosePath) {
              return new ClosePath(f(m.value0));
          };
          if (m instanceof Arc) {
              return new Arc(m.value0, f(m.value1));
          };
          if (m instanceof Rect) {
              return new Rect(m.value0, f(m.value1));
          };
          if (m instanceof FillRect) {
              return new FillRect(m.value0, f(m.value1));
          };
          if (m instanceof StrokeRect) {
              return new StrokeRect(m.value0, f(m.value1));
          };
          if (m instanceof ClearRect) {
              return new ClearRect(m.value0, f(m.value1));
          };
          if (m instanceof Scale) {
              return new Scale(m.value0, m.value1, f(m.value2));
          };
          if (m instanceof Rotate) {
              return new Rotate(m.value0, f(m.value1));
          };
          if (m instanceof Translate) {
              return new Translate(m.value0, m.value1, f(m.value2));
          };
          if (m instanceof Transform) {
              return new Transform(m.value0, f(m.value1));
          };
          if (m instanceof TextAlign) {
              return new TextAlign(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          if (m instanceof SetTextAlign) {
              return new SetTextAlign(m.value0, f(m.value1));
          };
          if (m instanceof Font) {
              return new Font(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          if (m instanceof SetFont) {
              return new SetFont(m.value0, f(m.value1));
          };
          if (m instanceof FillText) {
              return new FillText(m.value0, m.value1, m.value2, f(m.value3));
          };
          if (m instanceof StrokeText) {
              return new StrokeText(m.value0, m.value1, m.value2, f(m.value3));
          };
          if (m instanceof MeasureText) {
              return new MeasureText(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          if (m instanceof Save) {
              return new Save(f(m.value0));
          };
          if (m instanceof Restore) {
              return new Restore(f(m.value0));
          };
          if (m instanceof GetImageData) {
              return new GetImageData(m.value0, m.value1, m.value2, m.value3, Data_Functor.map(Data_Functor.functorFn)(f)(m.value4));
          };
          if (m instanceof PutImageData) {
              return new PutImageData(m.value0, m.value1, m.value2, f(m.value3));
          };
          if (m instanceof PutImageDataFull) {
              return new PutImageDataFull(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5, m.value6, f(m.value7));
          };
          if (m instanceof CreateImageData) {
              return new CreateImageData(m.value0, m.value1, Data_Functor.map(Data_Functor.functorFn)(f)(m.value2));
          };
          if (m instanceof CreateImageDataCopy) {
              return new CreateImageDataCopy(m.value0, Data_Functor.map(Data_Functor.functorFn)(f)(m.value1));
          };
          if (m instanceof DrawImage) {
              return new DrawImage(m.value0, m.value1, m.value2, f(m.value3));
          };
          throw new Error("Failed pattern match at Graphics.Canvas.Free line 101, column 1 - line 101, column 54: " + [ m.constructor.name ]);
      };
  });
  var liftGraphics = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorGraphicsF)(dictMonad);
  };
  var getImageData = function (dictMonad) {
      return function (x) {
          return function (y) {
              return function (w) {
                  return function (h) {
                      return liftGraphics(dictMonad)(new GetImageData(x, y, w, h, Control_Category.id(Control_Category.categoryFn)));
                  };
              };
          };
      };
  };
  var lineTo = function (dictMonad) {
      return function (x) {
          return function (y) {
              return liftGraphics(dictMonad)(new LineTo(x, y, Data_Unit.unit));
          };
      };
  };
  var measureText = function (dictMonad) {
      return function (s) {
          return liftGraphics(dictMonad)(new MeasureText(s, Control_Category.id(Control_Category.categoryFn)));
      };
  };
  var moveTo = function (dictMonad) {
      return function (x) {
          return function (y) {
              return liftGraphics(dictMonad)(new MoveTo(x, y, Data_Unit.unit));
          };
      };
  };
  var putImageData = function (dictMonad) {
      return function (d) {
          return function (x) {
              return function (y) {
                  return liftGraphics(dictMonad)(new PutImageData(d, x, y, Data_Unit.unit));
              };
          };
      };
  };
  var putImageDataFull = function (dictMonad) {
      return function (d) {
          return function (x) {
              return function (y) {
                  return function (dx) {
                      return function (dy) {
                          return function (dw) {
                              return function (dh) {
                                  return liftGraphics(dictMonad)(new PutImageDataFull(d, x, y, dx, dy, dw, dh, Data_Unit.unit));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var rect = function (dictMonad) {
      return function (r) {
          return liftGraphics(dictMonad)(new Rect(r, Data_Unit.unit));
      };
  };
  var restore = function (dictMonad) {
      return liftGraphics(dictMonad)(new Restore(Data_Unit.unit));
  };
  var rotate = function (dictMonad) {
      return function (th) {
          return liftGraphics(dictMonad)(new Rotate(th, Data_Unit.unit));
      };
  };
  var save = function (dictMonad) {
      return liftGraphics(dictMonad)(new Save(Data_Unit.unit));
  };
  var scale = function (dictMonad) {
      return function (sx) {
          return function (sy) {
              return liftGraphics(dictMonad)(new Scale(sx, sy, Data_Unit.unit));
          };
      };
  };
  var setFillStyle = function (dictMonad) {
      return function (s) {
          return liftGraphics(dictMonad)(new SetFillStyle(s, Data_Unit.unit));
      };
  };
  var setFont = function (dictMonad) {
      return function (f) {
          return liftGraphics(dictMonad)(new SetFont(f, Data_Unit.unit));
      };
  };
  var setLineCap = function (dictMonad) {
      return function (lc) {
          return liftGraphics(dictMonad)(new SetLineCap(lc, Data_Unit.unit));
      };
  };
  var setLineWidth = function (dictMonad) {
      return function (w) {
          return liftGraphics(dictMonad)(new SetLineWidth(w, Data_Unit.unit));
      };
  };
  var setShadowBlur = function (dictMonad) {
      return function (n) {
          return liftGraphics(dictMonad)(new SetShadowBlur(n, Data_Unit.unit));
      };
  };
  var setShadowColor = function (dictMonad) {
      return function (c) {
          return liftGraphics(dictMonad)(new SetShadowColor(c, Data_Unit.unit));
      };
  };
  var setShadowOffsetX = function (dictMonad) {
      return function (n) {
          return liftGraphics(dictMonad)(new SetShadowOffsetX(n, Data_Unit.unit));
      };
  };
  var setShadowOffsetY = function (dictMonad) {
      return function (n) {
          return liftGraphics(dictMonad)(new SetShadowOffsetY(n, Data_Unit.unit));
      };
  };
  var setStrokeStyle = function (dictMonad) {
      return function (s) {
          return liftGraphics(dictMonad)(new SetStrokeStyle(s, Data_Unit.unit));
      };
  };
  var setTextAlign = function (dictMonad) {
      return function (ta) {
          return liftGraphics(dictMonad)(new SetTextAlign(ta, Data_Unit.unit));
      };
  };
  var stroke = function (dictMonad) {
      return liftGraphics(dictMonad)(new Stroke(Data_Unit.unit));
  };
  var strokeRect = function (dictMonad) {
      return function (r) {
          return liftGraphics(dictMonad)(new StrokeRect(r, Data_Unit.unit));
      };
  };
  var strokeText = function (dictMonad) {
      return function (s) {
          return function (x) {
              return function (y) {
                  return liftGraphics(dictMonad)(new StrokeText(s, x, y, Data_Unit.unit));
              };
          };
      };
  };
  var textAlign = function (dictMonad) {
      return liftGraphics(dictMonad)(new TextAlign(Control_Category.id(Control_Category.categoryFn)));
  };
  var transform = function (dictMonad) {
      return function (tx) {
          return liftGraphics(dictMonad)(new Transform(tx, Data_Unit.unit));
      };
  };
  var translate = function (dictMonad) {
      return function (tx) {
          return function (ty) {
              return liftGraphics(dictMonad)(new Translate(tx, ty, Data_Unit.unit));
          };
      };
  };
  var runGraphics = function (ctx) {
      return function ($332) {
          return Control_Monad_Free_Trans.runFreeT(functorGraphicsF)(Control_Monad_Rec_Class.monadRecEff)(interpretGraphics(ctx))(Control_Monad_Free_Trans.hoistFreeT(functorGraphicsF)(Control_Monad_Eff.functorEff)(function ($333) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($333));
          })($332));
      };
  };
  var font = function (dictMonad) {
      return liftGraphics(dictMonad)(new Font(Control_Category.id(Control_Category.categoryFn)));
  };
  var fillText = function (dictMonad) {
      return function (s) {
          return function (x) {
              return function (y) {
                  return liftGraphics(dictMonad)(new FillText(s, x, y, Data_Unit.unit));
              };
          };
      };
  };
  var fillRect = function (dictMonad) {
      return function (r) {
          return liftGraphics(dictMonad)(new FillRect(r, Data_Unit.unit));
      };
  };
  var fill = function (dictMonad) {
      return liftGraphics(dictMonad)(new Fill(Data_Unit.unit));
  };
  var drawImage = function (dictMonad) {
      return function (src) {
          return function (x) {
              return function (y) {
                  return liftGraphics(dictMonad)(new DrawImage(src, x, y, Data_Unit.unit));
              };
          };
      };
  };
  var createImageDataCopy = function (dictMonad) {
      return function (d) {
          return liftGraphics(dictMonad)(new CreateImageDataCopy(d, Control_Category.id(Control_Category.categoryFn)));
      };
  };
  var createImageData = function (dictMonad) {
      return function (w) {
          return function (h) {
              return liftGraphics(dictMonad)(new CreateImageData(w, h, Control_Category.id(Control_Category.categoryFn)));
          };
      };
  };
  var closePath = function (dictMonad) {
      return liftGraphics(dictMonad)(new ClosePath(Data_Unit.unit));
  };
  var clip = function (dictMonad) {
      return liftGraphics(dictMonad)(new Clip(Data_Unit.unit));
  };
  var clearRect = function (dictMonad) {
      return function (r) {
          return liftGraphics(dictMonad)(new ClearRect(r, Data_Unit.unit));
      };
  };
  var beginPath = function (dictMonad) {
      return liftGraphics(dictMonad)(new BeginPath(Data_Unit.unit));
  };
  var arc = function (dictMonad) {
      return function (a) {
          return liftGraphics(dictMonad)(new Arc(a, Data_Unit.unit));
      };
  };
  exports["arc"] = arc;
  exports["beginPath"] = beginPath;
  exports["clearRect"] = clearRect;
  exports["clip"] = clip;
  exports["closePath"] = closePath;
  exports["createImageData"] = createImageData;
  exports["createImageDataCopy"] = createImageDataCopy;
  exports["drawImage"] = drawImage;
  exports["fill"] = fill;
  exports["fillRect"] = fillRect;
  exports["fillText"] = fillText;
  exports["font"] = font;
  exports["getImageData"] = getImageData;
  exports["interpretGraphics"] = interpretGraphics;
  exports["lineTo"] = lineTo;
  exports["measureText"] = measureText;
  exports["moveTo"] = moveTo;
  exports["putImageData"] = putImageData;
  exports["putImageDataFull"] = putImageDataFull;
  exports["rect"] = rect;
  exports["restore"] = restore;
  exports["rotate"] = rotate;
  exports["runGraphics"] = runGraphics;
  exports["save"] = save;
  exports["scale"] = scale;
  exports["setFillStyle"] = setFillStyle;
  exports["setFont"] = setFont;
  exports["setLineCap"] = setLineCap;
  exports["setLineWidth"] = setLineWidth;
  exports["setShadowBlur"] = setShadowBlur;
  exports["setShadowColor"] = setShadowColor;
  exports["setShadowOffsetX"] = setShadowOffsetX;
  exports["setShadowOffsetY"] = setShadowOffsetY;
  exports["setStrokeStyle"] = setStrokeStyle;
  exports["setTextAlign"] = setTextAlign;
  exports["stroke"] = stroke;
  exports["strokeRect"] = strokeRect;
  exports["strokeText"] = strokeText;
  exports["textAlign"] = textAlign;
  exports["transform"] = transform;
  exports["translate"] = translate;
  exports["functorGraphicsF"] = functorGraphicsF;
})(PS["Graphics.Canvas.Free"] = PS["Graphics.Canvas.Free"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Bind = PS["Control.Bind"];
  var Drawable = (function () {
      function Drawable(value0) {
          this.value0 = value0;
      };
      Drawable.create = function (value0) {
          return new Drawable(value0);
      };
      return Drawable;
  })();
  var setBorder = function (bordered) {
      if (bordered) {
          return Graphics_Canvas_Free.setStrokeStyle(Data_Identity.monadIdentity)("#000000");
      };
      if (!bordered) {
          return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Data_Unit.unit);
      };
      throw new Error("Failed pattern match at App.Element line 65, column 3 - line 67, column 15: " + [ bordered.constructor.name ]);
  };
  var colorToStr = function (v) {
      return "#" + Data_String.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
          return (function () {
              var $26 = x < 16;
              if ($26) {
                  return "0";
              };
              if (!$26) {
                  return "";
              };
              throw new Error("Failed pattern match at App.Element line 61, column 56 - line 61, column 82: " + [ $26.constructor.name ]);
          })() + Data_Int.toStringAs(Data_Int.hexadecimal)(x);
      })([ v.r, v.g, v.b ]));
  };
  var at = function (dictMonad) {
      return function (x) {
          return function (y) {
              return function (gfx) {
                  return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(dictMonad))(Graphics_Canvas_Free.save(dictMonad))(function () {
                      return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(dictMonad))(Graphics_Canvas_Free.translate(dictMonad)(Data_Int.toNumber(x))(Data_Int.toNumber(y)))(function () {
                          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(dictMonad))(gfx)(function () {
                              return Graphics_Canvas_Free.restore(dictMonad);
                          });
                      });
                  });
              };
          };
      };
  };
  exports["Drawable"] = Drawable;
  exports["at"] = at;
  exports["colorToStr"] = colorToStr;
  exports["setBorder"] = setBorder;
})(PS["App.Element"] = PS["App.Element"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var App_Element = PS["App.Element"];
  var Data_Foldable = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Functor = PS["Data.Functor"];        
  var render = function (dictFoldable) {
      return function (dictFoldable1) {
          return function (st) {
              var drawOne = function (v) {
                  return v.value0.drawn;
              };
              return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Graphics_Canvas_Free.setFillStyle(Data_Identity.monadIdentity)(App_Element.colorToStr(st.color)))(function () {
                  return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Graphics_Canvas_Free.fillRect(Data_Identity.monadIdentity)({
                      x: 0.0, 
                      y: 0.0, 
                      w: 1000.0, 
                      h: 1000.0
                  }))(function () {
                      return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Data_Foldable.traverse_(Control_Monad_Free_Trans.applicativeFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(dictFoldable)(drawOne)(st.statics))(function () {
                          return Data_Foldable.traverse_(Control_Monad_Free_Trans.applicativeFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(dictFoldable1)(drawOne)(st.elements);
                      });
                  });
              });
          };
      };
  };
  var advanceFrame = function (st) {
      var updateOne = function (v) {
          return v.value0.updated(Data_Unit.unit);
      };
      var $8 = {};
      for (var $9 in st) {
          if ({}.hasOwnProperty.call(st, $9)) {
              $8[$9] = st[$9];
          };
      };
      $8.elements = Data_Functor.map(Data_Functor.functorArray)(updateOne)(st.elements);
      return $8;
  };
  exports["advanceFrame"] = advanceFrame;
  exports["render"] = render;
})(PS["App.Diagram"] = PS["App.Diagram"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var App_Element = PS["App.Element"];
  var Prelude = PS["Prelude"];        
  var Static = (function () {
      function Static(value0) {
          this.value0 = value0;
      };
      Static.create = function (value0) {
          return new Static(value0);
      };
      return Static;
  })();
  var boxStatic = function (v) {
      return new App_Element.Drawable({
          drawn: v.value0.render(v.value0.moment), 
          updated: function (v1) {
              return boxStatic(new Static(v.value0));
          }
      });
  };
  exports["Static"] = Static;
  exports["boxStatic"] = boxStatic;
})(PS["App.Static"] = PS["App.Static"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var App_Element = PS["App.Element"];
  var App_Static = PS["App.Static"];
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var $$Math = PS["Math"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];        
  var renderRect = function (c) {
      return App_Element.at(Data_Identity.monadIdentity)(c.pos.x)(c.pos.y)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Graphics_Canvas_Free.setFillStyle(Data_Identity.monadIdentity)(App_Element.colorToStr(c.color)))(function () {
          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(App_Element.setBorder(c.bordered))(function () {
              return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Graphics_Canvas_Free.rotate(Data_Identity.monadIdentity)((Data_Int.toNumber(c.angle) * $$Math.pi) / 180.0))(function () {
                  return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Graphics_Canvas_Free.functorGraphicsF)(Data_Identity.monadIdentity))(Graphics_Canvas_Free.fillRect(Data_Identity.monadIdentity)({
                      x: 0.0, 
                      y: 0.0, 
                      w: Data_Int.toNumber(c.size.w), 
                      h: Data_Int.toNumber(c.size.h)
                  }))(function () {
                      return Graphics_Canvas_Free.strokeRect(Data_Identity.monadIdentity)({
                          x: 0.0, 
                          y: 0.0, 
                          w: Data_Int.toNumber(c.size.w), 
                          h: Data_Int.toNumber(c.size.h)
                      });
                  });
              });
          });
      }));
  };
  var staticRect = function (moment) {
      return new App_Static.Static({
          moment: moment, 
          render: renderRect
      });
  };
  var defaultRectMoment = {
      enabled: false, 
      bordered: false, 
      time: -1, 
      angle: 0, 
      size: {
          w: 0, 
          h: 0
      }, 
      pos: {
          x: 0, 
          y: 0
      }, 
      opacity: 0, 
      color: {
          r: 0, 
          g: 0, 
          b: 0
      }
  };
  exports["defaultRectMoment"] = defaultRectMoment;
  exports["renderRect"] = renderRect;
  exports["staticRect"] = staticRect;
})(PS["App.Rectangle"] = PS["App.Rectangle"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  exports["setInterval"] = $foreign.setInterval;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var App_Diagram = PS["App.Diagram"];
  var App_Element = PS["App.Element"];
  var App_Circle = PS["App.Circle"];
  var App_Rectangle = PS["App.Rectangle"];
  var App_Donut = PS["App.Donut"];
  var App_Static = PS["App.Static"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];        
  var line = function (s) {
      return function (p) {
          return App_Static.boxStatic(App_Rectangle.staticRect((function () {
              var $0 = {};
              for (var $1 in App_Rectangle.defaultRectMoment) {
                  if ({}.hasOwnProperty.call(App_Rectangle.defaultRectMoment, $1)) {
                      $0[$1] = App_Rectangle.defaultRectMoment[$1];
                  };
              };
              $0.enabled = true;
              $0.time = 0;
              $0.size = s;
              $0.pos = p;
              $0.opacity = 100;
              return $0;
          })()));
      };
  };
  var lines = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(line({
      w: 1000, 
      h: 1
  }))([ {
      x: 0, 
      y: 200
  }, {
      x: 0, 
      y: 400
  }, {
      x: 0, 
      y: 600
  } ]))(Data_Functor.map(Data_Functor.functorArray)(line({
      w: 1, 
      h: 1000
  }))([ {
      x: 200, 
      y: 0
  }, {
      x: 400, 
      y: 0
  }, {
      x: 600, 
      y: 0
  } ]));
  var interA = {
      paused: false, 
      color: {
          r: 175, 
          g: 143, 
          b: 90
      }, 
      statics: lines, 
      elements: [  ]
  };
  exports["interA"] = interA;
  exports["line"] = line;
  exports["lines"] = lines;
})(PS["Example.IntermissionA"] = PS["Example.IntermissionA"] || {});
(function(exports) {
  // Generated by psc version 0.10.5
  "use strict";
  var App_Diagram = PS["App.Diagram"];
  var Example_IntermissionA = PS["Example.IntermissionA"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Graphics_Canvas_Free = PS["Graphics.Canvas.Free"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Foldable = PS["Data.Foldable"];        
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Nothing) {
          return Control_Monad_Eff_Console.log("no canvas element found?")();
      };
      if (v instanceof Data_Maybe.Just) {
          Graphics_Canvas.setCanvasDimensions({
              width: 800.0, 
              height: 800.0
          })(v.value0)();
          var v1 = Graphics_Canvas.getContext2D(v.value0)();
          var v2 = Control_Monad_ST.newSTRef(Example_IntermissionA.interA)();
          Control_Monad_Eff_Timer.setInterval(16)(function __do() {
              Control_Monad_ST.modifySTRef(v2)(function (el) {
                  return App_Diagram.advanceFrame(el);
              })();
              var v3 = Control_Monad_ST.readSTRef(v2)();
              return Graphics_Canvas_Free.runGraphics(v1)(App_Diagram.render(Data_Foldable.foldableArray)(Data_Foldable.foldableArray)(v3))();
          })();
          return Control_Monad_Eff_Console.log("ok")();
      };
      throw new Error("Failed pattern match at Main line 18, column 3 - line 28, column 11: " + [ v.constructor.name ]);
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
